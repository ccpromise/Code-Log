For each test log, we have dozens of criteria to judge if the test if pass/conditional_pass/fail.
My internship program is to make the process automated.

we have two main classed: one is handler, one is rule.
For each rule, we use a class to describe it. It contains certain fields like what is the pass threshold, fail threshold, which log it deals with and so on.
For each handler, it derives from a base class. We pass a certain test log and rule to instantiate. So that for different rule which share the same handler, we can reuse the handler.

For the first step, our purpose is to we consider from the big pictures. We try to group these rules and abstract some common features from it. 

develop a tool for more efficient log analysis.
Before this tool developed, log analysis is mainly manual work.
For a single log, we have multiple rules to check: whether this test pass or conditional pass or fail these rules.
For example, we have a single rule about no more than 10 virtual machines are power off. So we will search in the log and find how many virtual machines are power off and make a pass or fail decision.
And now we want to make this process automatically.
The whole tool include three parts:
	1) collect logs needed for analysis: the input is a folder path in server, we need to decompose this folder and find the correct files for a specific rule, since different rule may analysis different logs.
	2) analysis the log: the main technic we use is regular expression. 
	3) report the result in html format
The main challenge:
	1) expandability: because our rules are not finally settled, we need to make it more flexible for possible modification.
	2) care about details
how to show your expandability and details: example? 


What today?
9/21: 
fix logical bug. find vm into dictionary.
Add more vm status rules and test them.
Code a special handler for not HA protected.
Merge no_renamed_vm rule into default handler:
	Edit without change of clients’ code.
Learn more about re:
	findall, match, search

9/28:
test different case on task pass rate rule, find bugs for boundary conditions.
By adding boundary check, solve it, and previous vm status rules should also add boundary check.

I think it’s all about caring details and make your code more flexible.
Because a single test log may not include all log features. Your code may fit in one log but fail in another one. 
Solution: 1) carefully study. 2) more flexible code, for example: re.findall instead of re.search in case there are two targets in one line.
Group your code. Build higher abstract layer on top of them.

9/29:
automatically collect the logs required for analysis(when you work with different rules, the log to analysis is different. So you should grab the file. This is supposed to have some basic sense on HTML. To search packages online. We use Beautiful soup to parse the HTML to a tree. We search its all href nodes. We analysis its linkage and match pattern with our field)

Tools to fasten your development

complete no vsan resync stuck rule: check for flag while tracking op_id
complete host related op success rule
complete vm migration rule


10／11:
define static method in a class
learn to build new html from template by inserting content from variables into the template.
html is basically text:
	{{template}}  .replace(‘{{template}}’, variable)
learn more safe operation with file:
	with open() as fin:


10/19：
today I work with HTML:
in python, you can use BeautifulSoup to interact with HTML DOM,
common ops include:
	soup = BeautifulSoup(html_text, ‘html.parser’)
	node = soup.find(id=“key”)
	node.next_slibing
	node[‘class’] = 
	node[‘onclick’] = ‘toggle(this)’
	node.string
	new_tag = soup.new_tag(‘a’, href = ‘’)
	node.append(new_tag)
	html = soup.prettify(‘utf8)
Besides, I simulate template and build a new HTML page, techs include:
	1\use class to dynamic control css style
	  it works with js to add and remove className from class value
	2\implement toggle(this) function

10/24:
Overall Summary for HTML Tech:
1\ HTML structure:
	<!DOCTYPE html>
	<html>
	  <head>
	    <title>
	    <meta> specifies character set, author, page description, keyword
	    <style type=“text/css”>
	      tr.FAIL{name: value(without “”)} .highlight{} => more techs to choose DOM
	    <script type=“text/javascript”>
	      var toggle = function(e)
	  </head>
	  <body>
		<p> <a> <img> <table> <ul> <ol> <input type=“text/submit/radio”>
		<div> <h> <p> <form> is block element: start from a new line
		others are inline: not start a new line
	  </body>
	</html>

<tag name=“value”>content</tag>
      attribute	  
In HTML, spaces and new lines are ignored
pre is for preformatted text, space and new lines won’t be ignored


2\ use javascript to control HTML DOM
3\ use BeautifulSoup to control HTML DOM
	t = soup.new_tag
	t[‘class’] = 
	t.get(‘href’)
	s.append(t)
	soup.find(id = “”)
	html = soup.prettify(‘utf8’)
4\ css attribute
	selector: by tag name, by class, by id
	p.ClassName {}
	#Id {}
	a:hover {}
	td a {} // for a in td
	
	background-color
	color
	font-family
	font-size
	text-align

10/26:
1\ new dev tools for python: python interpreter & Sublime Text
	build your environment, use pip3 to download packages.
2\ error and debug in python using logging, without IDE
	different level, write log info to files
3\ IO: with open(‘file’, ‘rb’/‘r’/‘w’) as f:
		f.read() f.readlines() f.write()
4\ Process and Thread:
	fork(): create a child process with the same content as parent process. call once and return twice: child process returns 0, parent process returns child id.







