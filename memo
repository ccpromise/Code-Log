For each test log, we have dozens of criteria to judge if the test if pass/conditional_pass/fail.
My internship program is to make the process automated.

For the first step, our purpose is to we consider from the big pictures. We try to group these rules and abstract some common features from it. 

develop a tool for more efficient log analysis.
Before this tool developed, log analysis is mainly manual work.
For a single log, we have multiple rules to check: whether this test pass or conditional pass or fail these rules.
For example, we have a single rule about no more than 10 virtual machines are power off. So we will search in the log and find how many virtual machines are power off and make a pass or fail decision.
And now we want to make this process automatically.
The whole tool include three parts:
	1) collect logs needed for analysis: the input is a folder path in server, we need to decompose this folder and find the correct files for a specific rule, since different rule may analysis different logs.
	2) analysis the log: the main technic we use is regular expression. 
	3) report the result in html format
The main challenge:
	1) expandability: because our rules are not finally settled, we need to make it more flexible for possible modification.
	2) care about details
how to show your expandability and details: example? 


What today?
9/21: 
fix logical bug. find vm into dictionary.
Add more vm status rules and test them.
Code a special handler for not HA protected.
Merge no_renamed_vm rule into default handler:
	Edit without change of clients’ code.
Learn more about re:
	findall, match, search

9/28:
test different case on task pass rate rule, find bugs for boundary conditions.
By adding boundary check, solve it, and previous vm status rules should also add boundary check.

I think it’s all about caring details and make your code more flexible.
Because a single test log may not include all log features. Your code may fit in one log but fail in another one. 
Solution: 1) carefully study. 2) more flexible code, for example: re.findall instead of re.search in case there are two targets in one line.
Group your code. Build higher abstract layer on top of them.

9/29:
automatically collect the logs required for analysis(when you work with different rules, the log to analysis is different. So you should grab the file. This is supposed to have some basic sense on HTML. To search packages online. We use Beautiful soup to parse the HTML to a tree. We search its all href nodes. We analysis its linkage and match pattern with our field)

Tools to fasten your development

complete no vsan resync stuck rule: check for flag while tracking op_id
complete host related op success rule
complete vm migration rule


10／11:
define static method in a class
learn to build new html from template by inserting content from variables into the template.
html is basically text:
	{{template}}  .replace(‘{{template}}’, variable)
learn more safe operation with file:
	with open() as fin:






