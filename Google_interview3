

public void Dfs(Node node, ref string str){
    if(node == null) return;
    foreach(var x in node.Children()){
        if(x.isString()) str+=x.getString();
        else{
            Dfs(x, ref str);
        }
    }
} 

public class Node{
    public bool isString;
    public string getString();
    public IList<Node> getList();
}

public bool HasEqualContent(Node a, Node b){
    var A = new NodeIter(a);
    var B =  new NodeIter(b);
    var str1 = "";
    var str2 = "";
    
    while(A.HasNext() || B.HasNext()){
        str1 = str1+A.Next();
        str2 = str2+B.Next();
        var len1 = str1.Length;
        var len2 = str2.Length;
        if(len1 > len2){
            if(str1.Substring(0, len2) != str2) return false;
            str1 = str1.Substring(len2);
            str2 = "";
        }
        else{
            if(str2.Substring(0, len1) != str1) return false;
            str2 = str2.Substring(len1);
            str1 = "";
        }
    }
    return true;
}

public class NodeIter{
    private Stack<Node> st;
    public NodeIter(Node a){
        st = new Stack<Node>();
        if(a != null) st.Push(a);
    }
    public bool HasNext(){
        if(st.Count() == 0) return false;
        var t = st.Pop();
        while(t.isString() == false){
            var nodes = t.getList();
            var N = nodes.Count();
            for(var i = N-1; i>= 0; i--){
                if(nodes[i] != null)
                    st.Push(nodes[i]);
            }
            if(st.Count() == 0) return false;
            t = st.Pop();
        }
        st.Push(t);
        return true;
    }
    public string Next(){
        var t = st.Pop();
        return t.getString();
    }
}